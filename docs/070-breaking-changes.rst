********************************
Solidity v0.7.0 Changements de rupture
********************************

Cette section met en √©vidence les principaux changements de rupture introduits dans Solidity
version 0.7.0, ainsi que le raisonnement derri√®re ces changements et la fa√ßon de mettre √† jour
code affect√©.
Pour la liste compl√®te, consultez
le changelog de la version <https://github.com/ethereum/solidity/releases/tag/v0.7.0>`_.


Changements silencieux de la s√©mantique
===============================

* L'exponentiation et les d√©calages de litt√©raux par des non-litt√©raux (par exemple, ``1 << x`` ou ``2 ** x``)
  utiliseront toujours soit le type ``uint256`` (pour les litt√©raux non n√©gatifs), soit le type
  ``int256`` (pour les litt√©raux n√©gatifs) pour effectuer l'op√©ration.
  Auparavant, l'op√©ration √©tait effectu√©e dans le type de la quantit√© de d√©calage / l'exposant, ce qui peut √™tre trompeur.
  exposant, ce qui peut √™tre trompeur.


Modifications de la syntaxe
=====================

* Dans les appels de fonctions externes et de cr√©ation de contrats, l'√©ther et le gaz sont maintenant sp√©cifi√©s en utilisant une nouvelle syntaxe :
  ``x.f{gaz : 10000, valeur : 2 √©ther}(arg1, arg2)``.
  L'ancienne syntaxe -- ``x.f.gas(10000).value(2 ether)(arg1, arg2)`` -- provoquera une erreur.

* La variable globale ``now`` est obsol√®te, ``block.timestamp`` devrait √™tre utilis√©e √† la place.
  L'identifiant unique ``now`` est trop g√©n√©rique pour une variable globale et pourrait donner l'impression
  qu'elle change pendant le traitement de la transaction, alors que ``block.timestamp`` refl√®te correctement
  refl√®te correctement le fait qu'il s'agit d'une propri√©t√© du bloc.

* Les commentaires NatSpec sur les variables ne sont autoris√©s que pour les variables d'√©tat publiques et non
  pour les variables locales ou internes.

* Le jeton ``gwei`` est maintenant un mot-cl√© (utilis√© pour sp√©cifier, par exemple, ``2 gwei`` comme un nombre)
  et ne peut pas √™tre utilis√© comme un identifiant.

* Les cha√Ænes de caract√®res ne peuvent plus contenir que des caract√®res ASCII imprimables, ce qui inclut une vari√©t√© de s√©quences d'√©chappement, telles que les hexad√©cimales.
  s√©quences d'√©chappement, telles que les √©chappements hexad√©cimaux (``xff``) et unicode (``u20ac``).

* Les cha√Ænes litt√©rales Unicode sont d√©sormais prises en charge pour accueillir les s√©quences UTF-8 valides. Ils sont identifi√©s
  avec le pr√©fixe ``unicode`` : ``unicode "Hello üòÉ"``.

* Mutabilit√© d'√©tat : La mutabilit√© d'√©tat des fonctions peut maintenant √™tre restreinte pendant l'h√©ritage :
  Les fonctions avec une mutabilit√© d'√©tat par d√©faut peuvent √™tre remplac√©es par des fonctions ``pure'' et ``view''.
  tandis que les fonctions ``view`` peuvent √™tre remplac√©es par des fonctions ``pure``.
  En m√™me temps, les variables d'√©tat publiques sont consid√©r√©es comme ``view`` et m√™me ``pure`` si elles sont constantes.
  si elles sont des constantes.



Assemblage en ligne
---------------

* Interdire ``.`` dans les noms de fonctions et de variables d√©finies par l'utilisateur dans l'assemblage en ligne.
  C'est toujours valable si vous utilisez Solidity en mode Yul-only.

* L'emplacement et le d√©calage de la variable pointeur de stockage ``x`` sont accessibles via ``x.slot`` et ``x.offset``.
  et ``x.offset`` au lieu de ``x_slot`` et ``x_offset``.

Suppression des fonctionnalit√©s inutilis√©es ou dangereuses
====================================

Mappages en dehors du stockage
------------------------

* Si une structure ou un tableau contient un mappage, il ne peut √™tre utilis√© que dans le stockage.
  Auparavant, les membres du mappage √©taient ignor√©s en m√©moire, ce qui est d√©routant et source d'erreurs.
  ce qui est d√©routant et source d'erreurs.

* Les affectations aux structures ou tableaux dans le stockage ne fonctionnent pas s'ils contiennent des mappings.
  mappings.
  Auparavant, les mappings √©taient ignor√©s silencieusement pendant l'op√©ration de copie, ce qui
  ce qui est trompeur et source d'erreurs.

Fonctions et √©v√©nements
--------------------

* La visibilit√© (``public`` / ``internal`') n'est plus n√©cessaire pour les constructeurs :
  Pour emp√™cher un contrat d'√™tre cr√©√©, il peut √™tre marqu√© ``abstract``.
  Cela rend le concept de visibilit√© pour les constructeurs obsol√®te.

* Contr√¥leur de type : D√©saccorder ``virtual`` pour les fonctions de biblioth√®que :
  Puisque les biblioth√®ques ne peuvent pas √™tre h√©rit√©es, les fonctions de biblioth√®que ne devraient pas √™tre virtuelles.

* Plusieurs √©v√©nements avec le m√™me nom et les m√™mes types de param√®tres dans la m√™me hi√©rarchie d'h√©ritage sont interdits.
  m√™me hi√©rarchie d'h√©ritage sont interdits.

* ``utiliser A pour B`` n'affecte que le contrat dans lequel il est mentionn√©.
  Auparavant, l'effet √©tait h√©rit√©. Maintenant, vous devez r√©p√©ter l'instruction "using" dans tous les contrats d√©riv√©s qui font usage de cette instruction.
  dans tous les contrats d√©riv√©s qui utilisent cette fonctionnalit√©.

Expressions
-----------

* Les d√©calages par des types sign√©s ne sont pas autoris√©s.
  Auparavant, les d√©calages par des montants n√©gatifs √©taient autoris√©s, mais ils √©taient annul√©s √† l'ex√©cution.

* Les d√©nominations ``finney`` et ``szabo`' sont supprim√©es.
  Elles sont rarement utilis√©es et ne rendent pas le montant r√©el facilement visible. A la place, des valeurs explicites
  valeurs explicites comme "1e20" ou le tr√®s commun "gwei" peuvent √™tre utilis√©es.

D√©clarations
------------

* Le mot-cl√© ``var`` ne peut plus √™tre utilis√©.
  Auparavant, ce mot-cl√© √©tait analys√© mais donnait lieu √† une erreur de type et √† une suggestion sur le type √† utiliser.
  une suggestion sur le type √† utiliser. Maintenant, il r√©sulte en une erreur d'analyse.

Changements d'interface
=================

* JSON AST : Marquer les litt√©raux de cha√Ænes hexagonales avec ``kind : "hexString"``.
* JSON AST : Les membres avec la valeur ``null`` sont supprim√©s de la sortie JSON.
* NatSpec : Les constructeurs et les fonctions ont une sortie userdoc coh√©rente.


Comment mettre √† jour votre code
=======================

Cette section donne des instructions d√©taill√©es sur la fa√ßon de mettre √† jour le code ant√©rieur pour chaque changement de rupture.

* Changez ``x.f.value(...)()`` en ``x.f{value : ...}()``. De m√™me, ``(new C).value(...)()`` en
  ``nouveau C{valeur : ...}()`` et ``x.f.gas(...).valeur(...)()`` en ``x.f{gas : ..., valeur : ...}()``.
* Remplacez ``now`` par ``block.timestamp``.
* Changez les types de l'op√©rande droit dans les op√©rateurs de d√©calage en types non sign√©s. Par exemple, remplacez ``x >> (256 - y)`` par
  ``x >> uint(256 - y)``.
* R√©p√©tez les d√©clarations ``utilisant A pour B`` dans tous les contrats d√©riv√©s si n√©cessaire.
* Supprimez le mot-cl√© "public" de chaque constructeur.
* Supprimer le mot-cl√© "interne" de chaque constructeur et ajouter "abstrait" au contrat (s'il n'est pas d√©j√† pr√©sent).
* Changez les suffixes ``_slot`` et ``_offset`' dans l'assemblage en ligne en ``.slot`` et ``.offset`', respectivement.
